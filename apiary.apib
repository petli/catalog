FORMAT: 1A
HOST: https://catalog.elog.io

# Catalog
A REST API for clients and third-party sites to interact with the data in the catalog.

The various objects and their properties are documented in much more detail here:
https://github.com/commonsmachinery/catalog/blob/master/doc/datamodel/core.md

The API uses many ideas from 
https://github.com/interagent/http-api-design and https://developer.github.com/v3/

Referenced objects are returned as a map:

    {
        "id": "someUserID",
        "href":  "https://catalog.elog.io/users/someUserID"
    }
    
When referencing another object in a PUT or POST request either property can be used for top-level objects,
but for e.g. `Media` objects that are referred via a `Work` only `href` is possible.

Errors are returned with a code for the client, a message for logging or even displaying to users,
and an optional link to further information:

    {
        "code": "invalid_alias",
        "message": "The alias provided contains invalid characters",
        "href": "https://catalog.elog.io/help/aliases"
    }


## Work [/works/{workID}{?fields,include,annotations}]
A work record.

The annotations, media and sources can either be manipulated via the sublist in the document, 
or via the separate collection endpoints.

Media instances are always accessed via the context of a Work, to determine visibility, 
and thus have URIs scoped under the work URI.
When adding another Work's Media to this Work, add the Work Media endpoint for that other
work to the `media` list.  It will be rewritten to the Media endpoint for the target Work.

To make the annotations easier to use in web pages the parameter `annotations` can be set
to a list of property names, e.g. `title,locator`.  This will change the response from a plain list to a hash map, only
including the listed properties.  (`all` means that all properties are included in the map.)
The keys in this map are `propertyName`, and the value a list of the Annotations for
that property sorted on `score`.  This allows easy access like `annotations.title[0].property.value` to show
e.g. a title without having to dig through the list.

The fields returned in the response can be selected with the `fields` parameter.

Some referenced objects can be populated in the response with the `include` parameter.  
(If `fields` has excluded the field, `include` will override and add the field to the response.)
The fields that can be populated are:

- `owner`: either `owner.user` or `owner.org`
- `added_by`
- `updated_by`
- `collabs.users`
- `collabs.groups`

TODO: decide if more fields should be allowed to be populated.  The lists can be rather heavy.


+ Parameters
    + workID (string) ... Work record ID
    + fields (string, optional) ... Comma-separated list of top-level fields to include
        (filtering out all other fields), or exclude (if preceeded by `-`)
    + include (string, optional) ... Comma-separated list of subobjects to populate.
    + annotations (string, optional) ... Select properties to return in an annotation hash map.

+ Model
    + Headers

            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee>;rel="self"

    + Body
    
            {
                "id": "5396e592d7d163613d7321ee",
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee",

                "added_by": {
                    "id": "someUserID",
                    "href":  "https://catalog.elog.io/users/someUserID"
                },
                "added_at": "2014-04-14T02:15:15Z",
                
                "updated_by": {
                    "id": "anotherUserID",
                    "href": "https://catalog.elog.io/users/anotherUserID"
                },
                "updated_at": "2014-04-14T02:15:15Z",
                
                "owner": {
                    "user": {
                        "id": "someUserID",
                        "href": "https://catalog.elog.io/users/someUserID"
                    }
                },
                
                "alias": "short-name",
                "description": "Description of work to guide catalog users (not part of the metadata)",
                "public": true,

                "forked_from": {
                    "id": "parentWorkID",
                    "href": "https://catalog.elog.io/works/parentWorkID"
                },

                "collabs": {
                    "users": [{
                        "id": "anotherUserID",
                        "href": "https://catalog.elog.io/users/anotherUserID"
                    }],
                    "groups": [{
                        "id": "someGroupID",
                        "href": "https://catalog.elog.io/groups/someGroupID"
                    }]
                },
                
                "annotations": [{
                        "id": "63613d7321ee5396e592d7d1",
                        "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/annotations/63613d7321ee5396e592d7d1",
                        
                        "updated_by": {
                            "id": "anotherUserID",
                            "href": "https://catalog.elog.io/users/anotherUserID"
                        },
                        "updated_at": "2014-04-14T02:15:15Z",
                        
                        "score": 100,
                        "property": {
                            "propertyName": "title",
                            "value": "Title of the work",
                            "titleLabel": "Title of the work"
                        }
                }],

                "sources": [{
                        "id": "6e592d7d63613d7321ee5391",
                        "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/sources/6e592d7d63613d7321ee5391",
                        
                        "source_work": {
                            "id": "sourceWorkID",
                            "href": "https://catalog.elog.io/works/sourceWorkID"
                        },
                        
                        "added_by": {
                            "id": "anotherUserID",
                            "href": "https://catalog.elog.io/users/anotherUserID"
                        },
                        "added_at": "2014-04-14T02:15:15Z"
                }],

                "media": [
                    {   "id": "someMediaID",
                        "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/someMediaID"
                    },
                    {   "id": "anotherMediaID",
                        "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/anotherMediaID"
                    }
                ]
            }


### Retrieve a Work [GET]
+ Response 200
    [Work][]


### Update a Work [PUT]
The following parameters can be updated, any others are ignored:

- alias
- description
- public

This really behaves like `PATCH`, so that any omitted parameters are not changed.

+ Request (application/json)

        {
            "alias": "foo",
            "description": "The foo movie",
            "public": true,
        }


+ Response 200 (application/json)
    [Work][]


### Update a Work [PATCH]

See `PUT` for details.

+ Request (application/json)

        {
            "public": true,
        }

+ Response 200 (application/json)
    [Work][]


### Delete a Work [DELETE]
+ Response 200
    [Work][]



## Work collection [/works{?page,per_page,sort,filter,fields,include,annotations}]

### List Works [GET]
List all works visible to the current user, optionally applying paging, filters and sorting.

Filters are specified as `filter=key:value`, typically an ID.  For now this is only intended to
support basic use cases so filtering is limited to a single key.  Later, more complex browsing
will be supported too.

Filter keys:

- `owner.user`
- `owner.org`
- `collabs.users`
- `collabs.groups`
- `sources.source_work`
- `forked_from`
- `media`

Likewise sorting only supports one key for now, specified as `sort=key` (ascending) or `sort=-key` (descending).
Sort keys:

- `added_at`
- `updated_at`

Pagination is supported by returning a `Link` header with links according to 
[RFC 5005](http://tools.ietf.org/html/rfc5005)

+ Parameters
    + page (number, optional) ... Page to start showing (first page has index 1)
    + per_page (number, optional) ... Page should contain these many records. Default and max values are system-dependent.
    + sort (string, optional) ... Sort response (see above). Default: "natural" sort.
    + filter (string, optional) ... Filter response (see above). Default: no filtering.
    + fields (string, optional) ... Fields to include (see above)
    + include (string, optional) ... References to populate (see above)
    + annotations (string, optional) ... Select properties to return in an annotation hash map.

+ Response 200 (application/json)
    + Headers
    
            Link: <?page=1&per_page=N&...>;rel="first", <?page=1&per_page=N&...>;rel="last", <?page=1&per_page=N&...>;rel="previous", <?page=1&per_page=N&...>;rel="next"

    + Body
    
            []


### Create Work [POST]
Create a new work.  The following parameters are used, all others are included:

The following parameters are used when creating a Work:

- alias
- description
- public
- collaborators
- annotations (see below)
- sources (only source_work)
- media

If any fields are missing, they are set to empty values or lists.  
The default for `public` depends on system configuration.

+ Request (application/json)
    [Work][]
    
+ Response 201 (application/json)
    [Work][]


## Create Work from an uploaded file [/works/actions/upload{?email}]

Instead of extracting all the metadata from a file locally, the catalog may provide the
service to clients to upload files for server-side processing instead. This either requires an
active session for a user, or an email address to be provided in the request. In both cases an email
will be sent to the user when the file has been processed with a link to confirm the uploaded data.

### Upload file [POST]

TODO: is this a sane way to upload files, or should multi-part requests be used instead?
Or is this really up to the client's discretion and we should accept both?

+ Parameters
    + email (string, optional) ... Uploader email, if there isn't already an active user session.
    
+ Request (mime-type/of-file)

        <file contents>

+ Response 202 (application/json)

        { "confirm_email": "foo@example.org" }
        

## Create Work from an online source [/works/actions/fetch{?url,email}]

Similar to uploading a file, this fetches information about a work that's available at a URL online.

A URL is returned that can be polled to check for the progress (see below).  It is also possible to request an
email to be sent when the processing is finished.

### Fetch online source [POST]

+ Parameters
    + url (optional, string) ... The URL, if not specified in the request body.
    + email (string, optional) ... Request an email to this address when the processing is done.

+ Request (application/json)

        { "url": "http://some/where", "email": "foo@example.org" }
        
+ Request (application/x-www-form-urlencoded)

        url=http://some/where&email=foo@example.org

+ Response 202 (application/json)

        { "progress_url": "https://catalog.elog.io/process/916e592d7d63613d7321ee53" }


## Check processing progress [/process/{jobID}{?timeout}]

Clients should not construct a URL to this endpoint directly, only use the URL returned from one of the 
processing endpoints when they accept a job.

The job status will be one of:

- `queued`
- `running`
- `finished`
- `failed`

If `finished`, a result will be included, which is job-specific.  If `failed`, an `error` will be included instead.

+ Parameters
    + timeout (integer, optional) ... Use long-polling, sending response only when job is finished/failed,
        timing out after this many seconds.  On timeout, sends whatever the job status is at that moment.

### Check progress [GET]

+ Response 200 (application/json)

        {
            "status": "finished",
            "result": {
                "work": {
                    "id": "5396e592d7d163613d7321ee",
                    "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee"
                }
            }
        }


## Media [/works/{workID}/media/{mediaID}{?annotations,fields,include}]
A media instance, which is a read-only record of a particular media instance of a Work
at the time it was recorded in the catalog.

A given Media instance can be linked to multiple works (e.g. when a Work is forked, or just
if it is added multiple times by different people from the same media source).  The instances will
all have the same ID, but must always be accessed via one of the works to determine visibility.

To make the annotations easier to use in web pages the parameter `annotations` can be set
to a list of property names, e.g. `title,locator`.  This will change the response from a plain list to a map, only
including the listed properties.  (`all` means that all properties are included in the map.)
The keys in this map are the `propertyName`, and the value a list of the Annotations for
that property.  This allows easy access like `annotations.title[0].property.value` to show
e.g. a title without having to dig through the list.

Some referenced objects can be populated in the response with the `include` parameter.  
(If `fields` has excluded the field, `include` will override and add the field to the response.)
The fields that can be populated are:

- `added_by`

TODO: decide if more fields should be populated.


+ Parameters
    + fields (string, optional) ... Comma-separated list of top-level fields to include
        (filtering out all other fields), or exclude (if preceeded by `-`)
    + include (string, optional) ... Comma-separated list of subobjects to populate.
    + annotations (string, optional) ... Select properties to get or update in map.

+ Model
    + Headers
    
            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/6e1ee592539d7d163613d732>;rel="self"

    + Body

            {
                "id": "6e1ee592539d7d163613d732",
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/6e1ee592539d7d163613d732",
                
                "added_by": {
                    "id": "someUserID",
                    "href":  "https://catalog.elog.io/users/someUserID"
                },
                "added_at": "2014-04-14T02:15:15Z",
                
                "replaces": {
                    "id": "oldMediaID",
                    "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/oldMediaID"
                },

                "annotations": [{
                        "id": "63613d7321ee5396e592d7d1",
                        "property": {
                            "propertyName": "title",
                            "value": "Title of the work",
                            "titleLabel": "Title of the work"
                        }
                    }],
                "metadata": {
                        "xmp": "<?xml...",
                        "oembed": { "url": "http://some/photo.jpg" }
                    }
            }


### Retrieve a Media [GET]
+ Response 200 (application/json)
    [Media][]


### Unlink a Media from a Work [DELETE]
This does not delete the underlying Media instance, just the link to it.
If this was the last link to the Media, it will be garbage collected eventually.

+ Response 200
    [Media][]


## Media collection [/works/{workID}/media{?fields,include,annotations}]

All the Media instances linked to this work.

+ Parameters
    + workID (string) ... Work ID whose Media are manipulated
    + fields (string, optional) ... Fields to include (see above)
    + include (string, optional) ... References to populate (see above)
    + annotations (string, optional) ... Select properties to get in response.

### List Work Media [GET]
Return all Media instances of the Work.

+ Response 200 (application/json)

        [{ "id": "..." }, { "id": "..." }]
        

### Unlink all Media from a Work [DELETE]
Convenience method to unlink all medias, rather than one by one.

+ Response 200 (application/json)

        []
        


### Create or link a Media to an existing Work [POST]

If `href` is included, the referenced `Media` instance will be linked to this work.

Otherwise a new Media instance is created and linked to this work, 
using the following properties in the request:

- annotations (empty list if omitted)
- metadata (empty object if omitted)
- replaces (null if omitted)

+ Request (application/json)
    
        {
            "replaces": {
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/media/oldMediaID"
            },

            "annotations": [{
                    "property": {
                        "propertyName": "title",
                        "value": "Title of the work",
                        "titleLabel": "Title of the work"
                    }
                }],
            "metadata": {
                "oembed": { "url": "http://some/photo.jpg" }
            }
        }
    
+ Response 201 (application/json)
    [Media][]
        

## Create Media from an uploaded file [/works/{workID}/media/actions/upload]

Similar to creating a new Work from an uploaded file (see `POST /works/actions/upload`)
this creates a new Media instance for the file and links it to the work.

TODO: should return progress polling URL, or perhaps send an email when done.

### Upload file [POST]

TODO: is this a sane way to upload files, or should multi-part requests be used instead?  
Or is this really up to the client's discretion and we should accept both?

+ Request (mime-type/of-file)

        <file contents>

+ Response 202 (application/json)

        { }


## Create Media from an online source [/works/{workID}/media/actions/fetch{?url}]

Similar to creating a new Work from an online source (see `POST /works/actions/fetch`)
this creates a new Media instance for the file and links it to the work.

TODO: should return progress polling URL, or perhaps send an email when done.

### Fetch online source [POST]

+ Parameters
    + url (optional, string) ... The URL, if not specified in the request body.

+ Request (application/json)

        { "url": "http://some/where" }
        
+ Request (application/x-www-form-urlencoded)

        url=http://some/where

+ Response 202 (application/json)

        { }


## Annotation [/works/{workID}/annotations/{annotionID}]
A Work or Media annotation, based on the [W3C Ontology for media resources](http://www.w3.org/TR/mediaont-10/).
This maps format-specific metadata into a common set of properties.

Media objects also contain Annotations, but since Media are read-only there is no endpoint for manipulating 
that list.

+ Model
    + Headers

            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee/annotations/63613d7321ee5396e592d7d1>;rel="self"

    + Body

            {
                "id": "63613d7321ee5396e592d7d1",
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/annotations/63613d7321ee5396e592d7d1",
                
                "updated_by": {
                    "id": "anotherUserID",
                    "href": "https://catalog.elog.io/users/anotherUserID"
                },
                "updated_at": "2014-04-14T02:15:15Z",
                
                "score": 100,
                "property": {
                    "propertyName": "title",
                    "value": "Title of the work",
                    "titleLabel": "Title of the work"
                }
            }


### Get a Work Annotation [GET]
+ Response 200 (application/json)
    [Annotation][]


### Update an Annotation [PUT]
Only the `score` and `property` Annotation properties may be changed.
Only properties included in the request are changed.

+ Request (application/json)
    
        {
            "score": 47,
            "property": {
                "value": "A better title"
            }
        }

+ Response 200 (application/json)
    [Annotation][]


### Update an Annotation [PATCH]
Same as `PUT`.

+ Request (application/json)

        { "score": 47 }

+ Response 200 (application/json)
    [Annotation][]


### Delete an Annotation [DELETE]
+ Response 200
    [Annotation][]


## Work Annotation collection [/works/{workID}/annotations]
Endpoint for accessing all annotations for a Work.  To just read annotations, 
`Work.annotations` can be used instead.

### List Work Annotations [GET]
+ Response 200 (application/json)

        [{ "id": "..." }, { "id": "..." }]


### Add a Work Annotation [POST]
Only `score` and `property` are used from the request body.  

`property` must include at least `propertyName` and `value`.

If `score` is omitted it is calculated from `property`.

+ Request (application/json)

        {
            "property": {
                "propertyName": "title",
                "value": "A title"
            }
        }

+ Response 201 (application/json)
    [Annotation][]


### Delete all annotations for a Work [DELETE]
+ Response 200 (application/json)

        []


## Source [/works/{workID}/sources/{sourceID}]

A link to a source Work for the `workID` Work.

+ Parameters
    + sourceID (string) ... ID for this source link, i.e. not the ID of the source work itself.

+ Model
    + Headers

            Link: <https://catalog.elog.io/works/5396e592d7d163613d7321ee/sources/6e592d7d63613d7321ee5391>;rel="self"

    + Body

            {
                    "id": "6e592d7d63613d7321ee5391",
                    "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee/sources/6e592d7d63613d7321ee5391",
                    
                    "source_work": {
                        "id": "sourceWorkID",
                        "href": "https://catalog.elog.io/works/sourceWorkID"
                    },
                    
                    "added_by": {
                        "id": "anotherUserID",
                        "href": "https://catalog.elog.io/users/anotherUserID"
                    },
                    "added_at": "2014-04-14T02:15:15Z"
            }

### Get a Work Source [GET]
+ Response 200 (application/json)
    [Source][]


### Delete a Source link [DELETE]
+ Response 200
    [Source][]


## Work Source collection [/works/{workID}/sources]
Endpoint for accessing all source links for a Work.  To just read them
`Work.sources` can be used instead.

### List Work Sources [GET]
+ Response 200 (application/json)

        [{ "id": "..." }, { "id": "..." }]


### Add a Work Source [POST]
Only `source_work` is used from the request body, and it must contain either a valid Work `href`
or `id` property.  The user must have permissions to read the source work to be able to link to it.

+ Request (application/json)

        { "source_work": { "href": "https://catalog.elog.io/works/321ee5396e592d7d163613d7" } }

+ Response 201 (application/json)
    [Source][]


### Delete all source links for a Work [DELETE]
+ Response 200 (application/json)

        []



## Lookup works by URI [/lookup/uri{?uri,context,page,per_page}]

Lookup works based on a URI, typically either a URL denoting a web location
or a URN indicating a file hash or other non-web identifier.

The best matches are always returned first.

Pagination is supported by returning a `Link` header with links according to 
http://tools.ietf.org/html/rfc5005

### Get matching works [GET]

+ Parameters
    + uri (string) ... A URI to lookup. Multiple URIs can be specified by repeating the parameter.
    + context (string, optional) ... The context for the lookup, typically the URL of the web page containing the URI queried.
        On e.g. Twitter, Facebook, blogs etc, it should rather be the permalink to the tweet or post containing the URI.
    + page (number, optional) ... Page to start showing (first page has index 1)
    + per_page (number, optional) ... Page should contain these many records. Default and max values are system-dependent.

+ Response 200 (application/json)
    + Headers

            Link: <?page=1&per_page=N&...>;rel="first", <?page=1&per_page=N&...>;rel="last", <?page=1&per_page=N&...>;rel="previous", <?page=1&per_page=N&...>;rel="next"    
            

    + Body
    
            [{
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee",
                "uri": "http://some.where/foo.jpg",
                "property": "locator"
                "score": 100
            }]


## Lookup works by block-median value hash [/lookup/bmvhash{?hash,src,context,page,per_page}]

Lookup works based on a block-median value hash, a perceptual image hash.  The maximum hash distance
is controlled by the catalog and cannot be changed by the client.

The closest matches are always returned first.

Pagination is supported by returning a `Link` header with links according to 
http://tools.ietf.org/html/rfc5005

### Get matching works [GET]

+ Parameters
    + hash (string) ... The hash as a hexadecimal string.
    * src (string, optional) ... The image source URL, if an online work is looked up.
    + context (string, optional) ... The context for the lookup, typically the URL of the web page containing the image.
        On e.g. Twitter, Facebook, blogs etc, it should rather be the permalink to the tweet or post containing the image.
    + page (number, optional) ... Page to start showing (first page has index 1)
    + per_page (number, optional) ... Page should contain these many records. Default and max values are system-dependent.

+ Response 200 (application/json)
    + Headers

            Link: <?page=1&per_page=N&...>;rel="first", <?page=1&per_page=N&...>;rel="last", <?page=1&per_page=N&...>;rel="previous", <?page=1&per_page=N&...>;rel="next"    
            
    + Body
    
            [{
                "href": "https://catalog.elog.io/works/5396e592d7d163613d7321ee",
                "distance": 3
            },
            {
                "href": "https://catalog.elog.io/works/d7321ee5396e592d7d163613",
                "distance": 8
            }]


## Collection [/collections/{collectionID}]

TODO

## Collection collection [/collections]

TODO

## User [/users/{userID}]
Public user profiles.  `gravatar_email` is only visible to the users themselves, not to other users.
The other information is public.

+ Model
    + Header

            Link: <https://catalog.elog.io/users/5396e592d7d163613d7321ee>;rel="self"

    + Body

            {
                "id": "5396e592d7d163613d7321ee",
                "href": "https://catalog.elog.io/users/5396e592d7d163613d7321ee",
                
                "alias": "foobar",
                "profile": {
                    "name": "Foo Barson",
                    "email": "foo@example.org",
                    "location": null,
                    "website": "http://this/page",
                    "gravatar_email": "foo@example.org",
                    "gravatar_hash": "34cd643fb9230abe3"
                }
            }

### Get User profile [GET]
+ Response 200 (application/json)
    [User][]


### Update User profile [PUT]

`gravatar_hash` cannot be set directly, only via `gravatar_email`.  
Only the included properties are changed, as in `PATCH`.  
Set a property to `null` to remove the value.

+ Request
    
        {
            "alias": "new alias",
            "profile": {
                "gravatar_email": "other@example.org"
            }
        }

+ Response 200 (application/json)
    [User][]


### Update User profile [PATCH]

See `PUT`.

+ Request


        {
            "profile": {
                "name": "Foo G. Barson"
            }
        }

+ Response 200 (application/json)
    [User][]


## Organisation [/orgs/{orgID}]

TODO

## Organisation collections [/orgs]

TODO

## Group [/orgs/{orgID}/groups/{groupID}]

TODO

## Group collection [/orgs/{orgID}/groups]

TODO